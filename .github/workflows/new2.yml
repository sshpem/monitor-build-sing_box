name: New2

# conditionï¼šhourly or dispatch
on:
  schedule:
    - cron: '0 * * * *'  # hourly
  workflow_dispatch:  # dispatch

jobs:
  check_new_version:
    runs-on: ubuntu-latest
    outputs:
      latest_tag_output: ${{ env.LATEST_TAG }}
      need_build: ${{ env.NEED_BUILD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Get latest tag
      - name: Get latest tag from SagerNet/sing-box
        id: get_tag
        run: |
          repo_latest_tag=$(curl -s https://api.github.com/repos/SagerNet/sing-box/releases | jq -r '[.[] | select(.prerelease == false)][0].tag_name')
          echo "Latest tag from SagerNet/sing-box is: $repo_latest_tag"
          echo "LATEST_TAG=$repo_latest_tag" >> $GITHUB_ENV

      # Check new tag
      - name: Check for new tag
        id: check_tag
        run: |
          if [ -f last_tag ]; then
            RECORD_LAST_TAG=$(cat last_tag)
          else
            RECORD_LAST_TAG=""
          fi
          echo "Last checked tag: $RECORD_LAST_TAG"
          if [ "${{ env.LATEST_TAG }}" != "$RECORD_LAST_TAG" ]; then
            echo "New tag detected: ${{ env.LATEST_TAG }}"
            echo "${{ env.LATEST_TAG }}" > last_tag
            echo "NEED_BUILD=true" >> $GITHUB_ENV
          else
            echo "No new tag detected."
            echo "NEED_BUILD=false" >> $GITHUB_ENV
            #exit 0
          fi

      - name: Push last_tag to repository
        if: ${{ env.NEED_BUILD == 'true' }}
        run: |
          git config user.email "sshpem@action.com"
          git config user.name "sshpem"
          git add last_tag
          git commit -m "Update last_tag"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_new_version:
    strategy:
      matrix:
        include:
          - name: linux-mipsel-softfloat
            goos: linux
            goarch: mipsle
            gomips: softfloat
          - name: linux-mipsel-hardfloat
            goos: linux
            goarch: mipsle
            gomips: hardfloat
          - name: linux-arm-v7
            goos: linux
            goarch: arm
            goarm: 7
          #- name: freebsd-amd64
          #  goos: freebsd
          #  goarch: amd64
      fail-fast: true
    needs: check_new_version
    runs-on: ubuntu-latest
    if: ${{ needs.check_new_version.outputs.need_build == 'true' }}
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOAMD64: ${{ matrix.goamd64 }}
      GOARM: ${{ matrix.goarm }}
      GOMIPS: ${{ matrix.gomips }}
      CGO_ENABLED: 0
      # TAGS: with_clash_api,with_quic

    steps:
      # Git clone SagerNet/sing-box
      - name: Clone sing-box repository
        run: |
          git clone --depth 1 --branch ${{ needs.check_new_version.outputs.latest_tag_output }} https://github.com/SagerNet/sing-box.git

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ^1.23

      - name: Check the working directory
        run: |
          echo "Current directory:"
          pwd
          echo "List files in the directory:"
          ls -la
          echo "Check Go version:"
          go version
          echo "Check Go modules:"
          go mod tidy
        working-directory: ./sing-box

      # Cross build and tar
      - name: Build the program
        run: |
          echo "Building for: ${{ matrix.name }}"
          make
          output_file_name="sing-box-${{ needs.check_new_version.outputs.latest_tag_output }}-${{ matrix.name }}.tar.gz"
          mkdir ../build
          tar -zcvf ../build/${output_file_name} sing-box
          rm sing-box
        working-directory: ./sing-box

      - name: List built files
        run: |
          cd ./build
          echo "List the files in the directory to ensure builds exist"
          ls -la

      # Release to repo
      - name: Create GitHub Release in your repo
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check_new_version.outputs.latest_tag_output }}
          files: ./build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  delete_workflows:
    runs-on: ubuntu-latest  
    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 3
          keep_minimum_runs: 6
